BASICS OF SQL

1. Write a SQL statement to display columns name and commission for all the salesmen. 

select name, comission from salesman;
+-------------+-----------+
| name        | comission |
+-------------+-----------+
| James Hoog  |      0.15 |
| Nail Knite  |      0.13 |
| Lauson Hen  |      0.12 |
| Pit Alex    |      0.11 |
| Mc Lyon     |      0.14 |
| Paul Adamn  |      0.13 |
| Ben Johnson |      0.13 |
| Sam Lawson  |      0.11 |
+-------------+-----------+



2. Find the salespeople who lives in the City of 'Paris'. Return salesperson's name, city.

select name, city from salesman where city='Paris';
+------------+-------+
| name       | city  |
+------------+-------+
| Nail Knite | Paris |
| Mc Lyon    | Paris |
+------------+-------+



3. Find the details of all employees whose name includes ‘James’ or ‘Adam’. Return
salesman_id, name.

select salesman_id, name from salesman where name like '%Adam%' or name like '%James%';
+-------------+------------+
| salesman_id | name       |
+-------------+------------+
|        5001 | James Hoog |
|        5007 | Paul Adam  |
+-------------+------------+



4. Find the details of those salespeople whose name starts with any letter within 'A' and 'L'
(not inclusive). Return salesman_id, name, city, commission.

select * from salesman where name between 'A' and 'L';
+-------------+-------------+----------+-----------+
| salesman_id | name        | city     | comission |
+-------------+-------------+----------+-----------+
|        5001 | James Hoog  | New York |      0.15 |
|        5010 | Ben Johnson | San Jose |      0.13 |
+-------------+-------------+----------+-----------+



5. Find those salesmen whose commission is greater than or equal to 0.13. Return name,
commission. 

select name, comission from salesman where comission >= 0.13;
+-------------+-----------+
| name        | comission |
+-------------+-----------+
| James Hoog  |      0.15 |
| Nail Knite  |      0.13 |
| Mc Lyon     |      0.14 |
| Paul Adam   |      0.13 |
| Ben Johnson |      0.13 |
+-------------+-----------+




6. Find the orders, which are delivered by a salesperson of ID. 5001. Return ord_no,
ord_date, purch_amt

select ord_no, ord_date, purch_amt from orders where salesman_id=5001;
+--------+------------+-----------+
| ord_no | ord_date   | purch_amt |
+--------+------------+-----------+
|  70002 | 2012-10-05 |     65.26 |
|  70005 | 2012-07-27 |   2400.60 |
|  70008 | 2012-09-10 |   5760.00 |
|  70013 | 2012-04-25 |   3045.60 |
+--------+------------+-----------+



7. Find the orders, which are delivered by a salesperson of ID. 5001 and purchace amount
is more than 1000. Return ord_no, ord_date, purch_amt

select ord_no, ord_date, purch_amt from orders where salesman_id = 5001 and purch_amt > 1000;
+--------+------------+-----------+
| ord_no | ord_date   | purch_amt |
+--------+------------+-----------+
|  70005 | 2012-07-27 |   2400.60 |
|  70008 | 2012-09-10 |   5760.00 |
|  70013 | 2012-04-25 |   3045.60 |
+--------+------------+-----------+



8. Find the products whose price is in the range 1000 to 4000. Begin and end values are
included. Return ord_no, ord_date, purch_amt

select ord_no, ord_date, purch_amt from orders where purch_amt >= 1000 and purch_amt <= 4000;
+--------+------------+-----------+
| ord_no | ord_date   | purch_amt |
+--------+------------+-----------+
|  70003 | 2012-10-10 |   2480.40 |
|  70005 | 2012-07-27 |   2400.60 |
|  70010 | 2012-10-10 |   1983.43 |
|  70013 | 2012-04-25 |   3045.60 |
|  70014 | 2012-06-25 |   1786.40 |
+--------+------------+-----------+



9. Write a SQL query to find all the orders which purchase amount is less than 500€ and
done before October 2012 or which purchase amount is greater than 2000 and done in
October 2012. Return ord_no, purch_amt, ord_date.

select ord_no, purch_amt, ord_date from orders where purch_amt < 500 and ord_date < '2012-10-01' OR purch_amt > 2
000 and ord_date between '2012-10-01' and '2012-10-31';
+--------+-----------+------------+
| ord_no | purch_amt | ord_date   |
+--------+-----------+------------+
|  70003 |   2480.40 | 2012-10-10 |
|  70004 |    110.50 | 2012-08-17 |
|  70009 |    270.65 | 2012-09-10 |
|  70011 |     75.29 | 2012-08-17 |
|  70012 |    250.45 | 2012-06-27 |
+--------+-----------+------------+



10. Update salesman whose id is 5007 name to be Paul White and his city to London. 

update salesman set name = 'Paul White', city = 'London' where salesman_id = 5007;



11. Update customer’s whose id is 3005 grade to be 300.

update customer set grade = 300 where customer_id = 3005;



12. Change salesman whose id is 5007 id to be 5009. psql should notice the contradiction if
you try to modify the id because it is referenced as foreign key from customer and orders
table. There are two options to do the task given.
Option 1: Drop the foreign key constraint from customer and order table first and then
make a change and create the foreign key constraints again to customer and orders.
Option 2: Insert “new” correct information to salesman. Then update the information to
other two tables. And finally remove the outdated information.

insert into salesman (salesman_id, name, city, comission) values (5009, 'Paul White', 'London', 0.13);
update orders set salesman_id = 5009 where salesman_id = 5007;
update customer set salesman_id = 5009 where salesman_id = 5007;
delete from salesman where salesman_id = 5007;



13. Delete order number 70014 from orders.

delete from orders where ord_no = 70014;



14. Delete salesman whose id is 5010 and all the customers who has the reference to this
salesman.
Hint: You have to delete first the customers who has the reference to salesman_id 5010. 

delete from customer where salesman_id = 5010;
delete from salesman where salesman_id = 5010;



15. Write a SQL query to calculate average purchase amount of all orders. Return average
purchase amount.

select avg(purch_amt) from orders;
+----------------+
| avg(purch_amt) |
+----------------+
|    1461.765000 |
+----------------+



16. Write a SQL query to calculate the average price for purchase amount of salesman
5001.

select avg(purch_amt) from orders where salesman_id = 5001;
+----------------+
| avg(purch_amt) |
+----------------+
|    2817.865000 |
+----------------+



17. Write a SQL query to calculate total purchase amount of all orders. Return total purchase
amount.

select sum(purch_amt) from orders;
+----------------+
| sum(purch_amt) |
+----------------+
|       17541.18 |
+----------------+



18. Write a SQL query to count the number of orders.

select count(*) from orders;
+----------+
| count(*) |
+----------+
|       12 |
+----------+



19. Write a SQL query to count the number of unique salespeople. Return number of
salespeople.
select count(distinct name) from salesman;
+----------------------+
| count(distinct name) |
+----------------------+
|                    7 |
+----------------------+



20. Write a SQL query to count the number of orders after 2012-07-01.

select count(ord_date) from orders where ord_date > '2012-07-01';
+-----------------+
| count(ord_date) |
+-----------------+
|              10 |
+-----------------+



21. Write a SQL query to count the number of orders in October 2012.

select count(ord_date) from orders where ord_date between '2012-09-30' and '2012-11-01';
+-----------------+
| count(ord_date) |
+-----------------+
|               4 |
+-----------------+



22. Write a SQL query to find the maximum purchase amount.

select max(purch_amt) from orders;
+----------------+
| max(purch_amt) |
+----------------+
|        5760.00 |
+----------------+



23. Write a SQL query to find the lowest purchase amount ordered by each customer.
Return customer ID, minimum purchase amount.

select customer_id, min(purch_amt) from orders group by customer_id;
+-------------+----------------+
| customer_id | min(purch_amt) |
+-------------+----------------+
|        3001 |         270.65 |
|        3002 |          65.26 |
|        3003 |          75.29 |
|        3004 |        1983.43 |
|        3005 |         150.50 |
|        3007 |        2400.60 |
|        3008 |         250.45 |
|        3009 |         110.50 |
+-------------+----------------+



24. Write a SQL query to find the highest purchase amount ordered by each customer on a
particular date. Return, order date, customer name and highest purchase amount.

select ord_date, cust_name, max(purch_amt) from orders inner join customer on orders.customer_id = customer.customer_id where ord_date like '2012-10-05' group by ord_date, cust_name;
+------------+--------------+----------------+
| ord_date   | cust_name    | max(purch_amt) |
+------------+--------------+----------------+
| 2012-10-05 | Graham Zusi  |         150.50 |
| 2012-10-05 | Nick Rimando |          65.26 |
+------------+--------------+----------------+


/// At this point in exercises I realized that I should probably be using capitalization and indentation for easier
reading. Sorry for not including it earlier.


25. Write a SQL query to find highest order (purchase) amount by each customer in a
particular order date. Filter the result by highest order (purchase) amount above
2000.00. Return customer id, order date and maximum purchase amount.

mysql> SELECT customer_id, ord_date, max(purch_amt)
    -> FROM orders
    -> WHERE ord_date LIKE '2012-09-10' AND purch_amt > 2000
    -> GROUP BY customer_id, ord_date;
+-------------+------------+----------------+
| customer_id | ord_date   | max(purch_amt) |
+-------------+------------+----------------+
|        3002 | 2012-09-10 |        5760.00 |
+-------------+------------+----------------+



26. Write a SQL query to find the maximum order (purchase) amount in the range 2000,
4000 (Begin and end values are included.) by combination of each customer and order
date.

/// I am not sure if I understood the question correctly, but here is what I got

mysql> SELECT customer_id, ord_date, purch_amt
    -> FROM orders
    -> WHERE purch_amt >= 2000 AND purch_amt <= 4000;
+-------------+------------+-----------+
| customer_id | ord_date   | purch_amt |
+-------------+------------+-----------+
|        3009 | 2012-10-10 |   2480.40 |
|        3007 | 2012-07-27 |   2400.60 |
|        3002 | 2012-04-25 |   3045.60 |
+-------------+------------+-----------+



27. Write a SQL query to find the maximum order (purchase) amount generated by each
salesperson. Filter the rows for the salesperson ID is in the range 5003 and 5008 (Begin
and end values are included.). Return salesperson id and maximum purchase amount.

mysql> SELECT salesman_id, max(purch_amt)
    -> FROM orders
    -> WHERE salesman_id BETWEEN 5003 AND 5008
    -> GROUP BY salesman_id;
+-------------+----------------+
| salesman_id | max(purch_amt) |
+-------------+----------------+
|        5003 |        2480.40 |
|        5005 |         270.65 |
|        5006 |        1983.43 |
+-------------+----------------+



28. Write a SQL query to count all the orders generated on '2012-08-17'. Return number of
orders.

mysql> SELECT count(ord_date)
    -> FROM orders
    -> WHERE ord_date LIKE '2012-08-17';
+-----------------+
| count(ord_date) |
+-----------------+
|               2 |
+-----------------+



29. Write a SQL query to calculate average purchase amount of each salesman. Return
salesman id and average purchase amount.

mysql> SELECT salesman_id, avg(purch_amt)
    -> FROM orders
    -> GROUP BY salesman_id;
+-------------+----------------+
| salesman_id | avg(purch_amt) |
+-------------+----------------+
|        5001 |    2817.865000 |
|        5002 |     449.816667 |
|        5003 |    1295.450000 |
|        5005 |     270.650000 |
|        5006 |    1983.430000 |
|        5009 |      75.290000 |
+-------------+----------------+



30. Sort the previous result in decreasing order by the average purchase amount.

mysql> SELECT salesman_id, avg(purch_amt)
    -> FROM orders
    -> GROUP BY salesman_id
    -> ORDER BY avg(purch_amt) DESC;
+-------------+----------------+
| salesman_id | avg(purch_amt) |
+-------------+----------------+
|        5001 |    2817.865000 |
|        5006 |    1983.430000 |
|        5003 |    1295.450000 |
|        5002 |     449.816667 |
|        5005 |     270.650000 |
|        5009 |      75.290000 |
+-------------+----------------+



31. Write a SQL query to find all the orders. Instead of showing salesman id you should
show salesman’s name. Return ord_no, purch_amt, ord_date, customer_id and
salesman name. You need to join orders and salesman tables.

mysql> SELECT ord_no, purch_amt, ord_date, customer_id, name AS salesman_name
    -> FROM orders
    -> INNER JOIN salesman
    -> ON orders.salesman_id = salesman.salesman_id;
+--------+-----------+------------+-------------+---------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_name |
+--------+-----------+------------+-------------+---------------+
|  70001 |    150.50 | 2012-10-05 |        3005 | Nail Knite    |
|  70002 |     65.26 | 2012-10-05 |        3002 | James Hoog    |
|  70003 |   2480.40 | 2012-10-10 |        3009 | Lauson Hen    |
|  70004 |    110.50 | 2012-08-17 |        3009 | Lauson Hen    |
|  70005 |   2400.60 | 2012-07-27 |        3007 | James Hoog    |
|  70007 |    948.50 | 2012-09-10 |        3005 | Nail Knite    |
|  70008 |   5760.00 | 2012-09-10 |        3002 | James Hoog    |
|  70009 |    270.65 | 2012-09-10 |        3001 | Pit Alex      |
|  70010 |   1983.43 | 2012-10-10 |        3004 | Mc Lyon       |
|  70011 |     75.29 | 2012-08-17 |        3003 | Paul White    |
|  70012 |    250.45 | 2012-06-27 |        3008 | Nail Knite    |
|  70013 |   3045.60 | 2012-04-25 |        3002 | James Hoog    |
+--------+-----------+------------+-------------+---------------+



32. Write a SQL query to find all the orders. Instead of showing salesman id you should
show salesman’s name and instead of showing customer id you should show customer
name. Return ord_no, purch_amt, ord_date, customer name and salesman name. You
need to join orders, salesman and customers tables. 

mysql> SELECT ord_no, purch_amt, ord_date, cust_name AS customer_name, name AS salesman_name
    -> FROM orders
    -> INNER JOIN salesman USING (salesman_id)
    -> INNER JOIN customer USING (customer_id);
+--------+-----------+------------+----------------+---------------+
| ord_no | purch_amt | ord_date   | customer_name  | salesman_name |
+--------+-----------+------------+----------------+---------------+
|  70009 |    270.65 | 2012-09-10 | Brad Guzan     | Pit Alex      |
|  70002 |     65.26 | 2012-10-05 | Nick Rimando   | James Hoog    |
|  70008 |   5760.00 | 2012-09-10 | Nick Rimando   | James Hoog    |
|  70013 |   3045.60 | 2012-04-25 | Nick Rimando   | James Hoog    |
|  70011 |     75.29 | 2012-08-17 | Jozy Altidor   | Paul White    |
|  70010 |   1983.43 | 2012-10-10 | Fabian Johnson | Mc Lyon       |
|  70001 |    150.50 | 2012-10-05 | Graham Zusi    | Nail Knite    |
|  70007 |    948.50 | 2012-09-10 | Graham Zusi    | Nail Knite    |
|  70005 |   2400.60 | 2012-07-27 | Brad Davis     | James Hoog    |
|  70012 |    250.45 | 2012-06-27 | Julian Green   | Nail Knite    |
|  70003 |   2480.40 | 2012-10-10 | Geoff Cameron  | Lauson Hen    |
|  70004 |    110.50 | 2012-08-17 | Geoff Cameron  | Lauson Hen    |
+--------+-----------+------------+----------------+---------------+



33. Find the salesperson and customer who belongs to same city. Return Salesman,
cust_name and city.

mysql> SELECT name AS Salesman, cust_name, customer.city
    -> FROM customer
    -> INNER JOIN salesman USING (salesman_id)
    -> WHERE customer.city = salesman.city;
+------------+----------------+----------+
| Salesman   | cust_name      | city     |
+------------+----------------+----------+
| Pit Alex   | Brad Guzan     | London   |
| James Hoog | Nick Rimando   | New York |
| Mc Lyon    | Fabian Johnson | Paris    |
| James Hoog | Brad Davis     | New York |
+------------+----------------+----------+



34. Calculate the average purchase amount of each salesman. Return salesman id,
salesman name and average purchase.
Hint: You need information from two tables.
Hint 2: You should include both id and name to group by clause 

mysql> SELECT salesman_id, name, avg(purch_amt)
    -> FROM salesman
    -> INNER JOIN orders using (salesman_id)
    -> GROUP BY salesman_id, name;
+-------------+------------+----------------+
| salesman_id | name       | avg(purch_amt) |
+-------------+------------+----------------+
|        5002 | Nail Knite |     449.816667 |
|        5001 | James Hoog |    2817.865000 |
|        5003 | Lauson Hen |    1295.450000 |
|        5005 | Pit Alex   |     270.650000 |
|        5006 | Mc Lyon    |    1983.430000 |
|        5009 | Paul White |      75.290000 |
+-------------+------------+----------------+



35. Change the previous so that it also shows those salesman who have not sold anything
(hint: left / right join). Sort the result table according to salesman_id ascending order.

mysql> SELECT salesman_id, name, avg(purch_amt)
    -> FROM salesman
    -> LEFT JOIN orders USING (salesman_id)
    -> GROUP BY salesman_id, name
    -> ORDER BY salesman_id;
+-------------+------------+----------------+
| salesman_id | name       | avg(purch_amt) |
+-------------+------------+----------------+
|        5001 | James Hoog |    2817.865000 |
|        5002 | Nail Knite |     449.816667 |
|        5003 | Lauson Hen |    1295.450000 |
|        5005 | Pit Alex   |     270.650000 |
|        5006 | Mc Lyon    |    1983.430000 |
|        5009 | Paul White |      75.290000 |
|        5011 | Sam Lawson |           NULL |
+-------------+------------+----------------+



36. Write a SQL query to find the salesperson(s) and the customer(s) he handle. Return
Customer Name, city, Salesman, commission. You need information from salesman and
customer tables. 

/// Was not specified whether to use customer city or salesman city, so this is customer city

mysql> SELECT cust_name, customer.city, name AS Salesman, comission
    -> FROM customer
    -> INNER JOIN salesman USING (salesman_id);
+----------------+------------+------------+-----------+
| cust_name      | city       | Salesman   | comission |
+----------------+------------+------------+-----------+
| Brad Guzan     | London     | Pit Alex   |      0.11 |
| Nick Rimando   | New York   | James Hoog |      0.15 |
| Jozy Altidor   | Moscow     | Paul White |      0.13 |
| Fabian Johnson | Paris      | Mc Lyon    |      0.14 |
| Graham Zusi    | California | Nail Knite |      0.13 |
| Brad Davis     | New York   | James Hoog |      0.15 |
| Julian Green   | London     | Nail Knite |      0.13 |
| Geoff Cameron  | Berlin     | Lauson Hen |      0.12 |
+----------------+------------+------------+-----------+



37. Write a SQL query to find those salespersons do not live in the same city where their
customers live and received a commission from the company more than 12%. Return
Customer Name, customer city, Salesman, salesman city, commission.

mysql> SELECT cust_name, customer.city AS Customer_city, name AS Salesman, salesman.city AS Salesman_city, comission
    -> FROM customer
    -> INNER JOIN salesman USING (salesman_id)
    -> WHERE customer.city != salesman.city AND comission > 0.12;
+--------------+---------------+------------+---------------+-----------+
| cust_name    | Customer_city | Salesman   | Salesman_city | comission |
+--------------+---------------+------------+---------------+-----------+
| Graham Zusi  | California    | Nail Knite | Paris         |      0.13 |
| Julian Green | London        | Nail Knite | Paris         |      0.13 |
| Jozy Altidor | Moscow        | Paul White | London        |      0.13 |
+--------------+---------------+------------+---------------+-----------+



38. Find all the orders issued by the salesman 'Paul White’. Return ord_no, purch_amt,
ord_date, customer_id and salesman_id. You can use subquery or join. 

mysql> SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
    -> FROM orders
    -> INNER JOIN salesman USING (salesman_id)
    -> WHERE salesman.name LIKE 'Paul White';
+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70011 |     75.29 | 2012-08-17 |        3003 |        5009 |
+--------+-----------+------------+-------------+-------------+



39. Write a SQL query to find all the orders, which are generated by those salespeople, who
live in the city of London. Return ord_no, purch_amt, ord_date, customer_id,
salesman_id. You can use subquery or join. 

mysql> SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
    -> FROM orders
    -> INNER JOIN salesman USING (salesman_id)
    -> WHERE salesman.city LIKE 'London';
+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70009 |    270.65 | 2012-09-10 |        3001 |        5005 |
|  70011 |     75.29 | 2012-08-17 |        3003 |        5009 |
+--------+-----------+------------+-------------+-------------+



40. Write a SQL query to find the orders generated by the salespeople who works for
customers whose id is 3007. Return ord_no, purch_amt, ord_date, customer_id,
salesman_id. A customer can works only with a salespeople.


/// Was not sure what the question was asking, hopefully I did it correctly

mysql> SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
    -> FROM orders
    -> WHERE customer_id = 3007;
+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70005 |   2400.60 | 2012-07-27 |        3007 |        5001 |
+--------+-----------+------------+-------------+-------------+



41. Write a SQL query to find the order values greater than the average order value of 10th
October 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id

mysql> SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
    -> FROM orders
    -> WHERE purch_amt > (
    -> SELECT avg(purch_amt)
    -> FROM orders
    -> WHERE ord_date = '2012-10-10');
+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70003 |   2480.40 | 2012-10-10 |        3009 |        5003 |
|  70005 |   2400.60 | 2012-07-27 |        3007 |        5001 |
|  70008 |   5760.00 | 2012-09-10 |        3002 |        5001 |
|  70013 |   3045.60 | 2012-04-25 |        3002 |        5001 |
+--------+-----------+------------+-------------+-------------+



42. Write a SQL query to find the commission of the salespeople work in Paris City (i.e.
whose customer is in Paris). Return salesman id, salesman name and commission

mysql> SELECT salesman_id, name AS Salesman_name, comission
    -> FROM salesman
    -> INNER JOIN customer USING (salesman_id)
    -> WHERE customer.city = 'Paris';
+-------------+---------------+-----------+
| salesman_id | Salesman_name | comission |
+-------------+---------------+-----------+
|        5006 | Mc Lyon       |      0.14 |
+-------------+---------------+-----------+



43. Create a view for those salespersons living in the city 'Paris’.

mysql> CREATE VIEW Paris_salesman AS
    -> SELECT *
    -> FROM salesman
    -> WHERE city = 'Paris';



44. create a view to compute average purchase amount and total purchase amount for each
salesperson. Return name, average purchase and total purchase amount. (Assume all
names are unique)..

mysql> CREATE VIEW avg_amounts AS
    -> SELECT salesman.name AS Salesman, AVG(purch_amt) AS Average_purchase, SUM(purch_amt) AS Total_purchase_amount
    -> FROM salesman
    -> INNER JOIN orders USING (salesman_id)
    -> GROUP BY salesman.name;
	
Salesman	Average_purchase	Total_purchase_amount
Nail Knite	449.816667			1349.45
James Hoog	2817.865000			11271.46
Lauson Hen	1295.450000			2590.90
Pit Alex	270.650000			270.65
Mc Lyon		1983.430000				1983.43
Paul White	75.290000			75.29
